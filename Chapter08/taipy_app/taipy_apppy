from taipy import Gui
import pandas as pd
import geopandas as gpd
import plotly.express as px
import json
from datetime import datetime
from typing import Tuple

# Constants
LOGO_PATH = "./img/logo.png"
APP_VERSION = "v1.0.0"
DATA_PATHS = {
    'orders': './data/olist_orders_dataset.csv',
    'customers': './data/olist_customers_dataset.csv',
    'order_items': './data/olist_order_items_dataset.csv',
    'products': './data/olist_products_dataset.csv',
    'geojson': './data/brazil-states.geojson'
}

def load_data() -> pd.DataFrame:
    """Load and preprocess data from CSV files."""
    orders = pd.read_csv(DATA_PATHS['orders'], usecols=[0,1,2,3,4,6,7])
    customers = pd.read_csv(DATA_PATHS['customers'])
    order_items = pd.read_csv(DATA_PATHS['order_items'], usecols=[0,1,2,3,5,6])
    products = pd.read_csv(DATA_PATHS['products'], usecols=[0,1])
    
    df = (orders.merge(customers, on='customer_id')
                .merge(order_items, on='order_id')
                .merge(products, on='product_id'))
    
    date_columns = ['order_purchase_timestamp', 'order_approved_at', 
                    'order_delivered_customer_date', 'order_estimated_delivery_date']
    df[date_columns] = df[date_columns].apply(pd.to_datetime)
    
    df['order_year'] = df['order_purchase_timestamp'].dt.year
    df['order_month'] = df['order_purchase_timestamp'].dt.month_name()
    df['order_date'] = df['order_purchase_timestamp'].dt.date
    
    return df

def load_geo_data(df: pd.DataFrame) -> Tuple[gpd.GeoDataFrame, dict]:
    """Load and process geographical data."""
    gdf = gpd.read_file(DATA_PATHS['geojson'])[['name', 'sigla', 'geometry']]
    gdf_by_year = df.groupby(['order_year', 'customer_state']).agg({
        'price': 'sum', 
        'customer_unique_id': lambda x: x.nunique()
    }).reset_index()
    gdf_by_year = gdf.merge(gdf_by_year, left_on='sigla', right_on='customer_state')
    geojson_data = json.loads(gdf_by_year.to_json())
    
    return gdf_by_year, geojson_data

def create_choropleth(gdf: gpd.GeoDataFrame, geojson_data: dict):
    """Create a choropleth map using Plotly Express."""
    fig = px.choropleth(
        gdf,
        geojson=geojson_data,
        locations='name',
        featureidkey="properties.name",
        color='price',
        hover_name='name',
        hover_data=['sigla', 'price', 'order_year', 'customer_state', 'customer_unique_id'],
        center={"lat": -14.2350, "lon": -51.9253},
        color_continuous_scale="plasma"
    )
    fig.update_geos(fitbounds="locations", visible=False)
    fig.update_layout(margin={"r":0, "t":0, "l":0, "b":0})
    return fig

def create_line_chart(daily_sales: pd.DataFrame):
    """Create a line chart for daily sales."""
    fig = px.line(
        daily_sales, 
        x='order_date', 
        y='price', 
        color_discrete_sequence=px.colors.sequential.Plasma,
        title='Somme des prix par jour',
        labels={'order_date': 'Date', 'price': 'Somme des prix'}
    )
    average_sales = daily_sales['price'].mean()
    fig.add_hline(
        y=average_sales, 
        line_dash="dash", 
        line_color="orange",
        annotation_text="average sales",
        annotation_position="top left"
    )
    return fig

def create_bar_chart(data: pd.DataFrame, x: str, y: str):
    """Create a horizontal bar chart."""
    return px.bar(
        data.nlargest(5, 'price').sort_values(by='price', ascending=False),
        x='price',
        y=y,
        orientation='h',
        color=y,
        color_discrete_sequence=px.colors.sequential.Plasma
    )

def create_pie_chart(data: pd.DataFrame):
    """Create a pie chart."""
    return px.pie(
        data.nlargest(5, 'price').sort_values(by='price', ascending=False),
        values='price',
        names='customer_city',
        color='customer_city',
        hole=0.4,
        color_discrete_sequence=px.colors.sequential.Plasma
    )

# Load data
df = load_data()
gdf, geo_data = load_geo_data(df)

# Prepare dates and version info
last_update_date = datetime.now().strftime("%Y-%m-%d")
data_freshness_date = df['order_date'].max().strftime("%Y-%m-%d")

# Initialize state variables
selected_year = gdf['order_year'].min()
selected_state = gdf['customer_state'].iloc[0]

def update_charts(state):
    filtered_gdf = gdf[gdf['order_year'] == state.selected_year]
    daily_sales = df[df['order_year'] == state.selected_year].groupby('order_date')['price'].sum().reset_index()
    sales_by_city = df[(df['order_year'] == state.selected_year) & (df['customer_state'] == state.selected_state)].groupby('customer_city')['price'].sum().reset_index()
    best_products = df[df['order_year'] == state.selected_year].groupby('product_category_name')['price'].sum().reset_index()

    state.total_price = filtered_gdf['price'].sum()
    state.unique_customers = filtered_gdf['customer_unique_id'].nunique()
    
    state.fig1 = create_choropleth(filtered_gdf, json.loads(filtered_gdf.to_json()))
    state.fig2 = create_line_chart(daily_sales)
    state.fig3 = create_bar_chart(gdf[gdf['order_year'] == state.selected_year], 'price', 'customer_state')
    state.fig4 = create_bar_chart(best_products, 'price', 'product_category_name')
    state.fig5 = create_pie_chart(sales_by_city)

page = """
# My very first dashboard with Taipy

<|layout|columns=1 1 1|
<|card|
### Total Price
<|{total_price:,.2f}|>
|>

<|card|
### Unique Customers
<|{unique_customers}|>
|>

<|card|
### Unique Customers
<|{unique_customers}|>
|>
|>

<|layout|columns=1 1|
<|plotly|figure={fig1}|>
<|plotly|figure={fig2}|>
|>

<|layout|columns=1 1 1|
<|plotly|figure={fig3}|>
<|plotly|figure={fig4}|>
<|plotly|figure={fig5}|>
|>

<|part|render=True|
## Filters

Select Order Year: <|{selected_year}|selector|lov={sorted(gdf['order_year'].unique())}|on_change=update_charts|>

Select State: <|{selected_state}|selector|lov={sorted(gdf['customer_state'].unique())}|on_change=update_charts|>

---

Last dashboard update: {last_update_date}
Data freshness date: {data_freshness_date}
Application version: {APP_VERSION}
Contact: [email@company.com](mailto:email@company.com)
|>
"""

if __name__ == "__main__":
    update_charts(Gui.state)
    Gui(page).run()